cmake_minimum_required (VERSION 2.8.12)

message(STATUS "CMAKE_GENERATOR : ${CMAKE_GENERATOR}")

project(Util)

find_package(Threads REQUIRED)

#
# Setup Paths
#

# Depends on a file list created by an external process. Here generated by 'find' on Unix systems.
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(FILELIST ${CMAKE_BINARY_DIR}/filelist.txt)

# Load SRC Variable from file
file(READ ${FILELIST} SRC)
string(REGEX REPLACE  "#.*$"  ""  SRC  ${SRC})
string(REPLACE        "\n"    ";" SRC  ${SRC})


# Source includes. We want the compiler to be more picky with these.
include_directories(
	${CMAKE_BINARY_DIR}/../../src
	src
)

# System includes. The compiler won't complain about these.
include_directories(
	SYSTEM
	${CMAKE_BINARY_DIR}/../../archive/build/usr/local/include
	${OSG_INCLUDE_DIR}
	${BULLET_INCLUDE_DIR}
)
link_directories(
	${CMAKE_BINARY_DIR}/../../archive/build/usr/local/lib
	${BULLET_LIBRARY_DIRS}
)

#
# Compilation
#

IF (WIN32)
ELSE()
  # Theoretically fixes an issue on OSX where system headers still generate warnings.
  set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX "-isystem ")

  #list( APPEND CMAKE_CXX_FLAGS " -std=c++11 --pedantic -Wall " )
  #list( APPEND CMAKE_CXX_FLAGS_RELEASE " -O3 " )
ENDIF()

add_library(${PROJECT_NAME} ${SRC})

set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 14
    CXX_STANDARD_REQUIRED YES
)



#
# Linking
#

#target_link_libraries(${PROJECT_NAME} tcmalloc_minimal)

if(THREADS_HAVE_PTHREAD_ARG)
	set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_OPTIONS "-pthread")
	set_property(TARGET ${PROJECT_NAME} PROPERTY INTERFACE_COMPILE_OPTIONS "-pthread")
endif()
if(CMAKE_THREAD_LIBS_INIT)
	target_link_libraries(${PROJECT_NAME} "${CMAKE_THREAD_LIBS_INIT}")
endif()
